# -*- coding: utf-8 -*-
"""Translation_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13zWLe06GGD8THNuaIZUZjM1I39FL_HaN
"""

pip install nltk



import nltk
from nltk.translate import AlignedSent, IBMModel1
from nltk.corpus import comtrans

# Load a small corpus from NLTK
nltk.download('comtrans')

# Create aligned sentences (parallel corpus)
aligned_sents = comtrans.aligned_sents()

# Train a Statistical Machine Translation model (IBM Model 1)
ibm_model = IBMModel1(aligned_sents, 5)  # Number of iterations

# Translate a sentence manually using the translation model
source_sentence = "she is learning programming"
source_words = source_sentence.split()

# Translate each word in the sentence using IBM Model 1
translated_words = []
for word in source_words:
    # Get the translation probabilities for the word
    translation_probs = ibm_model.translation_table[word]

    # Select the best translation based on the highest probability
    best_translation = max(translation_probs, key=translation_probs.get)

    translated_words.append(best_translation)

print("Original Sentence:", source_sentence)
print("Translated Sentence:", " ".join(translated_words))

pip install nltk gradio

import gradio as gr
import nltk
from nltk.translate import AlignedSent, IBMModel1
from nltk.corpus import comtrans

# Step 1: Load the NLTK corpus
nltk.download('comtrans')

# Step 2: Create aligned sentences (parallel corpus)
aligned_sents = comtrans.aligned_sents()

# Step 3: Train a Statistical Machine Translation model (IBM Model 1)
ibm_model = IBMModel1(aligned_sents, 5)  # Number of iterations

# Step 4: Define the translation function
def translate_sentence(input_sentence):
    source_words = input_sentence.split()

    translated_words = []
    for word in source_words:
        # Get the translation probabilities for the word
        translation_probs = ibm_model.translation_table[word]

        # Select the best translation based on the highest probability
        best_translation = max(translation_probs, key=translation_probs.get)

        translated_words.append(best_translation)

    # Join translated words and return as a sentence
    translated_sentence = " ".join(translated_words)
    return translated_sentence

# Step 5: Create Gradio interface
iface = gr.Interface(fn=translate_sentence,
                     inputs="text",
                     outputs="text",
                     live=True,
                     title="English to French Translation",
                     description="Translate an English sentence into French using IBM Model 1")

# Step 6: Launch the interface
iface.launch()